// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package v1

import (
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
	reflect "reflect"
)

// GetGeneratedDeepCopyFuncs returns the generated funcs, since we aren't registering them.
func GetGeneratedDeepCopyFuncs() []conversion.GeneratedDeepCopyFunc {
	return []conversion.GeneratedDeepCopyFunc{
		{Fn: DeepCopyv1_APIGroup, InType: reflect.TypeOf(&APIGroup{})},
		{Fn: DeepCopyv1_APIGroupList, InType: reflect.TypeOf(&APIGroupList{})},
		{Fn: DeepCopyv1_APIResource, InType: reflect.TypeOf(&APIResource{})},
		{Fn: DeepCopyv1_APIResourceList, InType: reflect.TypeOf(&APIResourceList{})},
		{Fn: DeepCopyv1_APIVersions, InType: reflect.TypeOf(&APIVersions{})},
		{Fn: DeepCopyv1_DeleteOptions, InType: reflect.TypeOf(&DeleteOptions{})},
		{Fn: DeepCopyv1_Duration, InType: reflect.TypeOf(&Duration{})},
		{Fn: DeepCopyv1_ExportOptions, InType: reflect.TypeOf(&ExportOptions{})},
		{Fn: DeepCopyv1_GetOptions, InType: reflect.TypeOf(&GetOptions{})},
		{Fn: DeepCopyv1_GroupKind, InType: reflect.TypeOf(&GroupKind{})},
		{Fn: DeepCopyv1_GroupResource, InType: reflect.TypeOf(&GroupResource{})},
		{Fn: DeepCopyv1_GroupVersion, InType: reflect.TypeOf(&GroupVersion{})},
		{Fn: DeepCopyv1_GroupVersionForDiscovery, InType: reflect.TypeOf(&GroupVersionForDiscovery{})},
		{Fn: DeepCopyv1_GroupVersionKind, InType: reflect.TypeOf(&GroupVersionKind{})},
		{Fn: DeepCopyv1_GroupVersionResource, InType: reflect.TypeOf(&GroupVersionResource{})},
		{Fn: DeepCopyv1_InternalEvent, InType: reflect.TypeOf(&InternalEvent{})},
		{Fn: DeepCopyv1_LabelSelector, InType: reflect.TypeOf(&LabelSelector{})},
		{Fn: DeepCopyv1_LabelSelectorRequirement, InType: reflect.TypeOf(&LabelSelectorRequirement{})},
		{Fn: DeepCopyv1_ListMeta, InType: reflect.TypeOf(&ListMeta{})},
		{Fn: DeepCopyv1_ListOptions, InType: reflect.TypeOf(&ListOptions{})},
		{Fn: DeepCopyv1_ObjectMeta, InType: reflect.TypeOf(&ObjectMeta{})},
		{Fn: DeepCopyv1_OwnerReference, InType: reflect.TypeOf(&OwnerReference{})},
		{Fn: DeepCopyv1_Patch, InType: reflect.TypeOf(&Patch{})},
		{Fn: DeepCopyv1_Preconditions, InType: reflect.TypeOf(&Preconditions{})},
		{Fn: DeepCopyv1_RootPaths, InType: reflect.TypeOf(&RootPaths{})},
		{Fn: DeepCopyv1_ServerAddressByClientCIDR, InType: reflect.TypeOf(&ServerAddressByClientCIDR{})},
		{Fn: DeepCopyv1_Status, InType: reflect.TypeOf(&Status{})},
		{Fn: DeepCopyv1_StatusCause, InType: reflect.TypeOf(&StatusCause{})},
		{Fn: DeepCopyv1_StatusDetails, InType: reflect.TypeOf(&StatusDetails{})},
		{Fn: DeepCopyv1_Time, InType: reflect.TypeOf(&Time{})},
		{Fn: DeepCopyv1_Timestamp, InType: reflect.TypeOf(&Timestamp{})},
		{Fn: DeepCopyv1_TypeMeta, InType: reflect.TypeOf(&TypeMeta{})},
		{Fn: DeepCopyv1_WatchEvent, InType: reflect.TypeOf(&WatchEvent{})},
	}
}

// DeepCopyv1_APIGroup ...
func DeepCopyv1_APIGroup(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*APIGroup)
		out := out.(*APIGroup)
		*out = *in
		if in.Versions != nil {
			in, out := &in.Versions, &out.Versions
			*out = make([]GroupVersionForDiscovery, len(*in))
			copy(*out, *in)
		}
		if in.ServerAddressByClientCIDRs != nil {
			in, out := &in.ServerAddressByClientCIDRs, &out.ServerAddressByClientCIDRs
			*out = make([]ServerAddressByClientCIDR, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1_APIGroupList ...
func DeepCopyv1_APIGroupList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*APIGroupList)
		out := out.(*APIGroupList)
		*out = *in
		if in.Groups != nil {
			in, out := &in.Groups, &out.Groups
			*out = make([]APIGroup, len(*in))
			for i := range *in {
				newVal, err := c.DeepCopy(&(*in)[i])
				if err != nil {
					return err
				}
				(*out)[i] = *newVal.(*APIGroup)
			}
		}
		return nil
	}
}

// DeepCopyv1_APIResource ...
func DeepCopyv1_APIResource(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*APIResource)
		out := out.(*APIResource)
		*out = *in
		if in.Verbs != nil {
			in, out := &in.Verbs, &out.Verbs
			*out = make(Verbs, len(*in))
			copy(*out, *in)
		}
		if in.ShortNames != nil {
			in, out := &in.ShortNames, &out.ShortNames
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1_APIResourceList ...
func DeepCopyv1_APIResourceList(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*APIResourceList)
		out := out.(*APIResourceList)
		*out = *in
		if in.APIResources != nil {
			in, out := &in.APIResources, &out.APIResources
			*out = make([]APIResource, len(*in))
			for i := range *in {
				newVal, err := c.DeepCopy(&(*in)[i])
				if err != nil {
					return err
				}
				(*out)[i] = *newVal.(*APIResource)
			}
		}
		return nil
	}
}

// DeepCopyv1_APIVersions ...
func DeepCopyv1_APIVersions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*APIVersions)
		out := out.(*APIVersions)
		*out = *in
		if in.Versions != nil {
			in, out := &in.Versions, &out.Versions
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		if in.ServerAddressByClientCIDRs != nil {
			in, out := &in.ServerAddressByClientCIDRs, &out.ServerAddressByClientCIDRs
			*out = make([]ServerAddressByClientCIDR, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1_DeleteOptions ...
func DeepCopyv1_DeleteOptions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*DeleteOptions)
		out := out.(*DeleteOptions)
		*out = *in
		if in.GracePeriodSeconds != nil {
			in, out := &in.GracePeriodSeconds, &out.GracePeriodSeconds
			*out = new(int64)
			**out = **in
		}
		if in.Preconditions != nil {
			in, out := &in.Preconditions, &out.Preconditions
			newVal, err := c.DeepCopy(*in)
			if err != nil {
				return err
			}
			*out = newVal.(*Preconditions)

		}
		if in.OrphanDependents != nil {
			in, out := &in.OrphanDependents, &out.OrphanDependents
			*out = new(bool)
			**out = **in
		}
		return nil
	}
}

// DeepCopyv1_Duration ...
func DeepCopyv1_Duration(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Duration)
		out := out.(*Duration)
		*out = *in
		return nil
	}
}

// DeepCopyv1_ExportOptions ...
func DeepCopyv1_ExportOptions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ExportOptions)
		out := out.(*ExportOptions)
		*out = *in
		return nil
	}
}

// DeepCopyv1_GetOptions ...
func DeepCopyv1_GetOptions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GetOptions)
		out := out.(*GetOptions)
		*out = *in
		return nil
	}
}

// DeepCopyv1_GroupKind ...
func DeepCopyv1_GroupKind(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupKind)
		out := out.(*GroupKind)
		*out = *in
		return nil
	}
}

// DeepCopyv1_GroupResource ...
func DeepCopyv1_GroupResource(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupResource)
		out := out.(*GroupResource)
		*out = *in
		return nil
	}
}

// DeepCopyv1_GroupVersion ...
func DeepCopyv1_GroupVersion(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupVersion)
		out := out.(*GroupVersion)
		*out = *in
		return nil
	}
}

// DeepCopyv1_GroupVersionForDiscovery ...
func DeepCopyv1_GroupVersionForDiscovery(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupVersionForDiscovery)
		out := out.(*GroupVersionForDiscovery)
		*out = *in
		return nil
	}
}

// DeepCopyv1_GroupVersionKind ...
func DeepCopyv1_GroupVersionKind(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupVersionKind)
		out := out.(*GroupVersionKind)
		*out = *in
		return nil
	}
}

// DeepCopyv1_GroupVersionResource ...
func DeepCopyv1_GroupVersionResource(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*GroupVersionResource)
		out := out.(*GroupVersionResource)
		*out = *in
		return nil
	}
}

// DeepCopyv1_InternalEvent ...
func DeepCopyv1_InternalEvent(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*InternalEvent)
		out := out.(*InternalEvent)
		*out = *in
		// in.Object is kind 'Interface'
		if in.Object != nil {
			newVal, err := c.DeepCopy(&in.Object)
			if err != nil {
				return err
			}
			out.Object = *newVal.(*runtime.Object)
		}
		return nil
	}
}

// DeepCopyv1_LabelSelector ...
func DeepCopyv1_LabelSelector(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*LabelSelector)
		out := out.(*LabelSelector)
		*out = *in
		if in.MatchLabels != nil {
			in, out := &in.MatchLabels, &out.MatchLabels
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		}
		if in.MatchExpressions != nil {
			in, out := &in.MatchExpressions, &out.MatchExpressions
			*out = make([]LabelSelectorRequirement, len(*in))
			for i := range *in {
				newVal, err := c.DeepCopy(&(*in)[i])
				if err != nil {
					return err
				}
				(*out)[i] = *newVal.(*LabelSelectorRequirement)
			}
		}
		return nil
	}
}

// DeepCopyv1_LabelSelectorRequirement ...
func DeepCopyv1_LabelSelectorRequirement(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*LabelSelectorRequirement)
		out := out.(*LabelSelectorRequirement)
		*out = *in
		if in.Values != nil {
			in, out := &in.Values, &out.Values
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1_ListMeta ...
func DeepCopyv1_ListMeta(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ListMeta)
		out := out.(*ListMeta)
		*out = *in
		return nil
	}
}

// DeepCopyv1_ListOptions ...
func DeepCopyv1_ListOptions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ListOptions)
		out := out.(*ListOptions)
		*out = *in
		if in.TimeoutSeconds != nil {
			in, out := &in.TimeoutSeconds, &out.TimeoutSeconds
			*out = new(int64)
			**out = **in
		}
		return nil
	}
}

// DeepCopyv1_ObjectMeta ...
func DeepCopyv1_ObjectMeta(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ObjectMeta)
		out := out.(*ObjectMeta)
		*out = *in
		out.CreationTimestamp = in.CreationTimestamp.DeepCopy()
		if in.DeletionTimestamp != nil {
			in, out := &in.DeletionTimestamp, &out.DeletionTimestamp
			*out = new(Time)
			**out = (*in).DeepCopy()
		}
		if in.DeletionGracePeriodSeconds != nil {
			in, out := &in.DeletionGracePeriodSeconds, &out.DeletionGracePeriodSeconds
			*out = new(int64)
			**out = **in
		}
		if in.Labels != nil {
			in, out := &in.Labels, &out.Labels
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		}
		if in.Annotations != nil {
			in, out := &in.Annotations, &out.Annotations
			*out = make(map[string]string)
			for key, val := range *in {
				(*out)[key] = val
			}
		}
		if in.OwnerReferences != nil {
			in, out := &in.OwnerReferences, &out.OwnerReferences
			*out = make([]OwnerReference, len(*in))
			for i := range *in {
				newVal, err := c.DeepCopy(&(*in)[i])
				if err != nil {
					return err
				}
				(*out)[i] = *newVal.(*OwnerReference)
			}
		}
		if in.Finalizers != nil {
			in, out := &in.Finalizers, &out.Finalizers
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1_OwnerReference ...
func DeepCopyv1_OwnerReference(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*OwnerReference)
		out := out.(*OwnerReference)
		*out = *in
		if in.Controller != nil {
			in, out := &in.Controller, &out.Controller
			*out = new(bool)
			**out = **in
		}
		return nil
	}
}

// DeepCopyv1_Patch ...
func DeepCopyv1_Patch(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Patch)
		out := out.(*Patch)
		*out = *in
		return nil
	}
}

// DeepCopyv1_Preconditions ...
func DeepCopyv1_Preconditions(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Preconditions)
		out := out.(*Preconditions)
		*out = *in
		if in.UID != nil {
			in, out := &in.UID, &out.UID
			*out = new(types.UID)
			**out = **in
		}
		return nil
	}
}

// DeepCopyv1_RootPaths ...
func DeepCopyv1_RootPaths(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*RootPaths)
		out := out.(*RootPaths)
		*out = *in
		if in.Paths != nil {
			in, out := &in.Paths, &out.Paths
			*out = make([]string, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1_ServerAddressByClientCIDR ...
func DeepCopyv1_ServerAddressByClientCIDR(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*ServerAddressByClientCIDR)
		out := out.(*ServerAddressByClientCIDR)
		*out = *in
		return nil
	}
}

// DeepCopyv1_Status ...
func DeepCopyv1_Status(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Status)
		out := out.(*Status)
		*out = *in
		if in.Details != nil {
			in, out := &in.Details, &out.Details
			newVal, err := c.DeepCopy(*in)
			if err != nil {
				return err
			}
			*out = newVal.(*StatusDetails)

		}
		return nil
	}
}

// DeepCopyv1_StatusCause ...
func DeepCopyv1_StatusCause(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*StatusCause)
		out := out.(*StatusCause)
		*out = *in
		return nil
	}
}

// DeepCopyv1_StatusDetails ...
func DeepCopyv1_StatusDetails(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*StatusDetails)
		out := out.(*StatusDetails)
		*out = *in
		if in.Causes != nil {
			in, out := &in.Causes, &out.Causes
			*out = make([]StatusCause, len(*in))
			copy(*out, *in)
		}
		return nil
	}
}

// DeepCopyv1_Time ...
func DeepCopyv1_Time(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Time)
		out := out.(*Time)
		*out = in.DeepCopy()
		return nil
	}
}

// DeepCopyv1_Timestamp ...
func DeepCopyv1_Timestamp(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*Timestamp)
		out := out.(*Timestamp)
		*out = *in
		return nil
	}
}

// DeepCopyv1_TypeMeta ...
func DeepCopyv1_TypeMeta(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*TypeMeta)
		out := out.(*TypeMeta)
		*out = *in
		return nil
	}
}

// DeepCopyv1_WatchEvent ...
func DeepCopyv1_WatchEvent(in interface{}, out interface{}, c *conversion.Cloner) error {
	{
		in := in.(*WatchEvent)
		out := out.(*WatchEvent)
		*out = *in
		newVal, err := c.DeepCopy(&in.Object)
		if err != nil {
			return err
		}
		out.Object = *newVal.(*runtime.RawExtension)
		return nil
	}
}
